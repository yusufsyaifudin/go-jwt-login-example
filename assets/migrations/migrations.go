// Code generated by go-bindata.
// sources:
// 1536496889_create_users_table.down.sql
// 1536496889_create_users_table.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1536496889_create_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcb\xbf\x0a\x83\x30\x14\x85\xf1\x3d\x4f\x71\x36\x87\x92\x27\xe8\xd4\xa2\x05\x41\xe8\x9f\x38\x74\xb5\xf1\x50\x2f\xb5\x09\xe4\x5e\xb1\x8f\x5f\xc4\xf5\xe3\xfb\x79\x8f\xc3\x57\xde\x65\x30\xa2\xce\x6b\x72\xde\x23\xdc\x3b\x28\xa3\x49\x4e\xa8\xb6\x58\x41\x14\xfc\x31\x2e\xc6\x11\xeb\xc4\x04\x9b\x44\xb1\xc3\x6d\x13\x45\xc9\xf3\xcc\x11\xaf\x21\x7e\x5c\xfd\xb8\xde\xd0\x9f\xce\x5d\x83\xf6\x82\xe6\xd9\x86\x3e\x60\x51\x16\x3d\xba\x7f\x00\x00\x00\xff\xff\xf6\xdc\x2c\x00\x72\x00\x00\x00")

func _1536496889_create_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1536496889_create_users_tableDownSql,
		"1536496889_create_users_table.down.sql",
	)
}

func _1536496889_create_users_tableDownSql() (*asset, error) {
	bytes, err := _1536496889_create_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1536496889_create_users_table.down.sql", size: 114, mode: os.FileMode(511), modTime: time.Unix(1536496928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1536496889_create_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd2\xc1\x4f\xc2\x30\x14\x06\xf0\x7b\xff\x8a\xef\xc6\x16\x5d\xa2\x17\x2f\x9c\x0a\x14\x69\x1c\x03\xb6\x4e\xc1\xcb\xb2\xb0\x17\x69\x22\x65\xae\x5d\xe0\xcf\x37\x0c\x17\x43\xa2\x8d\x07\x77\x5b\xf3\xbd\x5f\xda\x97\x2f\x8a\x70\xb3\xd7\x6f\x4d\xe9\x08\x79\xcd\xa2\x08\xd9\x2a\x86\x36\xb0\xb4\x75\xfa\x60\x30\xc8\xeb\x01\xb4\x05\x9d\x68\xdb\x3a\xaa\x70\xdc\x91\x81\xdb\x69\x8b\xcb\xdc\x39\xa4\x2d\xca\xba\x7e\xd7\x54\xb1\x71\x2a\xb8\x12\x50\x7c\x14\x0b\xc8\x29\x92\x85\x82\x58\xcb\x4c\x65\x68\x2d\x35\x96\x05\x0c\xd0\x15\x7c\xdf\x48\x3e\x66\x22\x95\x3c\xf6\xa6\x3a\x3a\xc9\xe3\x18\xcb\x54\xce\x79\xba\xc1\x93\xd8\xdc\x32\xc0\x94\x7b\xf2\x8c\x3d\xf3\x74\x3c\xe3\xa9\xdf\xfe\xd6\xcf\xe2\xf9\xe6\x1e\xf5\x4b\x0c\xee\x1f\xee\xc2\x3f\x8a\x75\x69\xed\xf1\xd0\xfc\xb6\x87\x5e\xf4\x83\x57\xe2\xb6\xa1\xd2\x51\x55\x94\xee\xc7\xa8\x92\x73\x91\x29\x3e\x5f\xe2\x45\xaa\x59\xf7\x8b\xd7\x45\x22\x30\x11\x53\x9e\xc7\x0a\xe6\x70\x0c\xc2\xeb\x57\xd7\xd5\x3f\x8a\x2c\x1c\x32\xd6\xd7\x23\x4f\xe4\x2a\x17\x90\xc9\x44\xac\xd1\x1a\xfd\xd1\x52\xd1\xd5\xa3\xe8\x57\x5d\x68\x53\xd1\x09\x8b\xe4\x52\x9b\xa0\x3f\x0f\x87\xec\x33\x00\x00\xff\xff\x96\x45\xf3\xdb\xb4\x02\x00\x00")

func _1536496889_create_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1536496889_create_users_tableUpSql,
		"1536496889_create_users_table.up.sql",
	)
}

func _1536496889_create_users_tableUpSql() (*asset, error) {
	bytes, err := _1536496889_create_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1536496889_create_users_table.up.sql", size: 692, mode: os.FileMode(511), modTime: time.Unix(1536497038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1536496889_create_users_table.down.sql": _1536496889_create_users_tableDownSql,
	"1536496889_create_users_table.up.sql": _1536496889_create_users_tableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1536496889_create_users_table.down.sql": &bintree{_1536496889_create_users_tableDownSql, map[string]*bintree{}},
	"1536496889_create_users_table.up.sql": &bintree{_1536496889_create_users_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

